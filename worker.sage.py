

# This file was *autogenerated* from the file worker.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3)
print("HI")
import traceback
print("HI")
try:
	import argparse
	from sage.rings.polynomial.pbori import BooleanPolynomialRing
	import msgspec
except:
	traceback.print_exc()

inpath = "/home/juschei/Desktop/cnf_anf_gb/input/"
outpath = "/home/juschei/Desktop/cnf_anf_gb/output/"


def standard_conversion(ring, clauses):
    functions = []
    variables = ring.gens()

    for c in clauses:
        f = ring(_sage_const_1 )
        for L in c:
            if L > _sage_const_0 :
                f *= (variables[L] + _sage_const_1 )
            elif L < _sage_const_0 :
                f *= variables[-L]

        functions.append(f)

    return functions
    

def process(nr_vars, clauses, nr):
	B = BooleanPolynomialRing(nr_vars+_sage_const_1 , 'x')
	ideal = B.ideal(standard_conversion(B, clauses))
	gb = ideal.groebner_basis()
	
	data = dumps(gb)
	with open(outpath + str(nr).zfill(_sage_const_3 ), "wb") as f:
		f.write(data)
		


if __name__=="__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument("--nr", type=int, required=True)
	args = parser.parse_args()
	nr = args.nr
	with open(inpath + str(nr).zfill(_sage_const_3 ), "rb") as f:
		raw = f.read()
		nr_vars, clauses = msgspec.msgpack.decode(raw)
		process(nr_vars, clauses, nr)
		

